{"paragraphs":[{"text":"%md\n# Immutability\n\nImmutability by default is a notorius feature of most functional programming languages.  Some languages will enforce this property, while others will merely recommend it.  Dealing with Immutable state is probably one of the most difficult transitions to make when coming from imperative programming to functional programming, but given a few techniques, it is possible to work with immutable state and collections in as natural a way as you would with their mutable counterparts in imperative languages.\n\n### Mutable vs Immutable\n\nWhen considering the differences between mutable and immutable state, it may be helpful to outline a simple challenge, and see how the two modes of thinking may converge on a solution: \n\n```\nGiven an ordered list of the numbers 0 to 50,\nwith one element missing, and an array of length 50 which contains those numbers, \nfind the missing number.\n```\n\nA mutable solution may look like the following: \n\n```scala\n\nval withNumberTenMissing = Array(\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n  50)\n\ndef findMissingImp(input: Array[Int]): Int = {\n  var i = 0\n  while(i == input(i))\n    i = i + 1\n  i\n}\n\nfindMissingImp(withNumberTenMissing) // 10\n\n```\n\nThe key to finding our answer in the above, is the use of 'i' as a mutable index into the array.  The index is progressively moved along by mutating its state until we find our missing number.\n\nA functional solution on the other hand, may look like so: \n\n```scala\n\nval withNumberTenMissing = Array(\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n  50)\n\ndef findMissingFun(input: Array[Int]): Int = {\n  (0 to 50).zip(input).filter((value) => value._1 != value._2).head._1\n}\n\nfindMissingFun(withNumberTenMissing) // 10\n\n```\n\nThe functional solution takes the list 0 .. 50 inclusive, and zips it with the input array to produce a list of tuples of the form List((0, 0), (1, 1) ... (49, 50)).  It then filters the list to include only those tuples where the numbers do not equal eachother List((10, 11), (11, 12) ... (49, 50)).  We can then infer, that the missing number in the array, is the first element of the tuple at the head of the filtered list.\n\nAlthough the second version may seem somewhat obscure at first glance, it does show the more declarative nature of the functional paradigm.  Instead of stating a micromanaged sequence of alterations to mutable memory addresses, we have used a collection of functions, which outline a possible definition for finding our missing number.  This is done without altering any existing state within the function, yet acheives the same result.  For a clearer showcase of the lack of mutability in the above example, see the following, which is an equivalent function:\n\n```scala\n\nval withNumberTenMissing = Array(\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n  50)\n\ndef findMissingFun(input: Array[Int]): Int = {\n  val range = 0 to 50\n  val zipped = range zip input\n  val answerAtHead = zipped.filter((value) => value._1 != value._2)\n  val answerTuple = answerAtHead.head\n  val (missingNum, _) = answerTuple\n  missingNum\n}\n\nfindMissingFun(withNumberTenMissing) // 10\n\n```\n\nThis is one example of how a problem may be solved without resorting to mutable state, but another question occurrs regarding how we can cater for changes in state.  As afterall, a program without changeable state is of almost no use in a fundamentally stateful world.\n\n##### Changing State in an Immutable Context\n\nAs with most problems in functional programming, the solution to the problem of changing state comes in the form of functions.  It should be understood however, that a mutation in state is not the same as reassignment, and program state should not be confused with variable assignment.  \n\nState is simply a representation of a value at a moment in time.  It is entirely possible to manipulate dynamic structures such as lists, by returning a new instance of that list with the desired state changes carried out.\n\nFor an example of this:\n\n```scala\n\nimport scala.collection.mutable.ArrayBuffer\n\ndef reverse(para: ArrayBuffer[Int]): ArrayBuffer[Int] = {\n\n  var mutableArray = para\n  var end = mutableArray.length - 1\n  var start = 0\n  var oldStart = 0\n\n  while(start < end) {\n    oldStart = mutableArray(start)\n    mutableArray(start) = mutableArray(end)\n    mutableArray(end) = oldStart\n    start = start + 1\n    end = end - 1\n  }\n\n  mutableArray\n}\n\nval list = ArrayBuffer(1, 2, 3, 4, 5)\nreverse(list)\n\n```\n\nThe above imperative solution reverses the list in place, before returning the reversed list.  In a functional solution, a datastructure can be deconstructed, and built back in the desired state by using function calls as an implicit stack behind the scenes which we may use as a tool to deconstruct our data.\n\n```scala\n\ndef reverse(para: List[Int]): List[Int] = {\n\n  def _reverse(current: Int, tail: List[Int], acc: List[Int]): List[Int] = {\n\n    tail match {\n      case Nil                => current :: acc\n      case next :: remaining  => _reverse(next, remaining, current :: acc)\n    }\n  }\n\n  _reverse(para.head, para.tail, List())\n}\n\nval list = List(1, 2, 3, 4, 5)\nreverse(list)\n\n```\n\nThe above acheives the same result of reversing the input datastructure, but it handles an immutable list.  Updates to state are actually acheived by recursively disconstructing the datastructure, and forming a new datastructure a piece at a time.  While this may seem wasteful, it is important to consider that a recursively defined datastructure need only be deconstructed up to the element at which we need to 'mutate' the element: \n\n```scala \n\ndef capitalize(str: List[Char]) = {\n  str.head.toUpper :: str.tail\n}\n\nval name = List[Char]('l', 'i', 'a', 'm')\ncapitalize(name) // List[Char]('L', 'i', 'a', 'm')\n\n```\n\nIt is for this reason, that we typically see immutable data structures implemented as Tree's and List's, as they are particularly ameaniable to definition by recursion.  In the case of Tree's, entire subtrees of the old structure may be reused in the newly created immutable structure.\n\n### The Problems with Mutability\n\nThis may seem like a lot of trouble to go to in order to maintain immutability, and it may seem unnessecary if one is familiar with imperative based mutable solutions.  It is the case that when time or space constraints are imposed on a software system, that the mutable micro managing of state and space are preferable, however, in the era of cheap memory and computational power (relatively speaking), many applications benefit to a greater extent from shortened development time and ease of code understanding.\n\nThis is one area where Immutable structures have somewhat of an advantage over their mutable counterparts.  An immutable structure or value can be easier to 'reason about', as once you know the value of a named parameter, you can be sure that it will always be that value wherever you see that name within the values scope. \n\nThis is in direct conflict with mutable variables, which at any moment in time may be holding a different value to what it held just recently.  These problems are only more emphasised in a multithreaded envionment, where multiple threads of execution may be contending for the same resource to perform updates.\n\nConversely, immutable structures have a certain advantage when it comes to a multithreaded environment.  When all values and structures which are defined are read only, they therefore do not require locking.\n\n### Pure Functions\n\nWith a lack of mutable state, it is also much easier to avoid functions which carry out side effects on the system they reside in.  Side Effects can be understood as any mutation to external state which occurs as the result of the invokation of a function.  A Pure Function therefore, is a function which only operates on the data which is passed in to it.  Only a very simple example needs to be present to understand the drawbacks of using a funtion which undertakes side effects as part of its operation:\n\n```scala\n\ncase object ImpureFunction {\n\n  var externalState = 0\n  def sideEffectTheExternalState(x: Int): Int = {\n    externalState = x + externalState\n    externalState\n  }\n}\n\nImpureFunction.sideEffectTheExternalState(4)    // 4\nImpureFunction.sideEffectTheExternalState(4)    // 8\nImpureFunction.sideEffectTheExternalState(4)    // 12\nImpureFunction.sideEffectTheExternalState(4)    // 16\n\n```\n\nIn the object example, the invokation of the function 'sideEffectTheExternalState', causes the side effect of updating the state 'externalState'.  Immediately we see the consequence of this design descision.  It has become exponentially harder to reason about, as the relationship between the functions inputs and its output, is not only a function of the inputs, but also of the temporal order of the function calls.\n\nAs we read and understand the code, in order to infer the return value of the simple invokation of sideEffectTheExternalState(4), we must also understand and trace all previous invokations.  This can be a task of trivial difficultly, or an error prone and protracted program tracing exercise, depending on the size of the codebase and complexity of the side effect.\n\nConversely, a function such as the following: \n\n```scala\ncase object PureFunction {\n\n  def sideEffectTheExternalState(x: Int, y: Int, z: Int): Int = {\n    (x * x * y * z)/y\n  }\n}\n\nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16\nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16\nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16    \nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16\n```\n\n... is much easier to reason about.  Although the operation the function carries out is slightly more complicated.  Once we have understood the evaluation of the function, we can be assured that for the same inputs, we will receive the same results.\n\nThis provides a lift on the mental burden which the programmer will face when reading code which is using a purely functional approach.  Using pure functions and immutability also helps to build toward the ideal of the code base becomming referentially transparent in sections.\n\n### Referential Transparency\n\nA Referentially Transparent system, is in effect, a system made up of pure functions, in which those pure functions may be replaced by their value, and this replacement will not affect the semantics of the system.\n\nAs an example of this, consider the following: \n\n```scala\ndef someFunc(x: Int, y: Int): Int = {\n  val sum = x + y\n  sum / 2\n}\n```\n\nThe above function when invoked with (2, 4), can have its values substituted as follows: \n\n```\nsomeFunc(2, 4)\n    6 = 2 + 4\n    return 6 / 2\n```\n\nThis is the correct behaviour for this function.  \n\nNow consider what happens when we throw assignment into the mix.\n\n```scala\ndef someFunc(x: Int, y: Int): Int = {\n  var sum = x\n  sum = sum + y\n  sum / 2\n}\n\nsomeFunc(2, 4)\n```\n\nAnd now try to evaluate our function via substitution of values: \n\n```\nsomeFunc(2, 4)\n    2(sum) = 2\n    2(sum) = 2(sum) + 4 //incorrect!\n    return 3\n```\n\nBy introducing the assignment, we can no longer evaluate our function via substition, due to the temporal coupling between the variable sum, and its place in the code, the value contained with the sum variable has become non deterministic. \n\n### Multithreading\n\nUltimately, this treatment of immutability by default, is one of the key tools in making Functional Programming more suited to multithreaded or distributed computing.\n\nFirstly, this is because (as mentioned previously), immutable structures do not require locking, allowing for optimal concurrent and parallel access patterns.  Additionally, referential transparency effectivly means a liberation from many of the temporal couplings side effecting code contains.  While this does not completely eliminate all problems, it does make working within the parallel context easier.  One such problem which remains, is that of working with stale data.  Immutable data structures do not guarantee for instance, that the data you are reading is the most up to date, as there may be new alterations in a new branch of the structure.\n\n","user":"anonymous","dateUpdated":"2017-03-03T08:15:45+0000","config":{"enabled":true,"tableHide":false,"results":[{"graph":{"mode":"table","height":1358,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":7,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{"payBy":""},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Immutability</h1>\n<p>Immutability by default is a notorius feature of most functional programming languages. Some languages will enforce this property, while others will merely recommend it. Dealing with Immutable state is probably one of the most difficult transitions to make when coming from imperative programming to functional programming, but given a few techniques, it is possible to work with immutable state and collections in as natural a way as you would with their mutable counterparts in imperative languages.</p>\n<h3>Mutable vs Immutable</h3>\n<p>When considering the differences between mutable and immutable state, it may be helpful to outline a simple challenge, and see how the two modes of thinking may converge on a solution: </p>\n<pre><code>Given an ordered list of the numbers 0 to 50,\nwith one element missing, and an array of length 50 which contains those numbers, \nfind the missing number.\n</code></pre>\n<p>A mutable solution may look like the following: </p>\n<pre><code class=\"scala\"><br/>val withNumberTenMissing = Array(\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n  50)\n\ndef findMissingImp(input: Array[Int]): Int = {\n  var i = 0\n  while(i == input(i))\n    i = i + 1\n  i\n}\n\nfindMissingImp(withNumberTenMissing) // 10\n\n</code></pre>\n<p>The key to finding our answer in the above, is the use of &lsquo;i&rsquo; as a mutable index into the array. The index is progressively moved along by mutating its state until we find our missing number.</p>\n<p>A functional solution on the other hand, may look like so: </p>\n<pre><code class=\"scala\"><br/>val withNumberTenMissing = Array(\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n  50)\n\ndef findMissingFun(input: Array[Int]): Int = {\n  (0 to 50).zip(input).filter((value) =&gt; value._1 != value._2).head._1\n}\n\nfindMissingFun(withNumberTenMissing) // 10\n\n</code></pre>\n<p>The functional solution takes the list 0 .. 50 inclusive, and zips it with the input array to produce a list of tuples of the form List((0, 0), (1, 1) &hellip; (49, 50)). It then filters the list to include only those tuples where the numbers do not equal eachother List((10, 11), (11, 12) &hellip; (49, 50)). We can then infer, that the missing number in the array, is the first element of the tuple at the head of the filtered list.</p>\n<p>Although the second version may seem somewhat obscure at first glance, it does show the more declarative nature of the functional paradigm. Instead of stating a micromanaged sequence of alterations to mutable memory addresses, we have used a collection of functions, which outline a possible definition for finding our missing number. This is done without altering any existing state within the function, yet acheives the same result. For a clearer showcase of the lack of mutability in the above example, see the following, which is an equivalent function:</p>\n<pre><code class=\"scala\"><br/>val withNumberTenMissing = Array(\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n  50)\n\ndef findMissingFun(input: Array[Int]): Int = {\n  val range = 0 to 50\n  val zipped = range zip input\n  val answerAtHead = zipped.filter((value) =&gt; value._1 != value._2)\n  val answerTuple = answerAtHead.head\n  val (missingNum, _) = answerTuple\n  missingNum\n}\n\nfindMissingFun(withNumberTenMissing) // 10\n\n</code></pre>\n<p>This is one example of how a problem may be solved without resorting to mutable state, but another question occurrs regarding how we can cater for changes in state. As afterall, a program without changeable state is of almost no use in a fundamentally stateful world.</p>\n<h5>Changing State in an Immutable Context</h5>\n<p>As with most problems in functional programming, the solution to the problem of changing state comes in the form of functions. It should be understood however, that a mutation in state is not the same as reassignment, and program state should not be confused with variable assignment. </p>\n<p>State is simply a representation of a value at a moment in time. It is entirely possible to manipulate dynamic structures such as lists, by returning a new instance of that list with the desired state changes carried out.</p>\n<p>For an example of this:</p>\n<pre><code class=\"scala\"><br/>import scala.collection.mutable.ArrayBuffer\n\ndef reverse(para: ArrayBuffer[Int]): ArrayBuffer[Int] = {\n\n  var mutableArray = para\n  var end = mutableArray.length - 1\n  var start = 0\n  var oldStart = 0\n\n  while(start &lt; end) {\n    oldStart = mutableArray(start)\n    mutableArray(start) = mutableArray(end)\n    mutableArray(end) = oldStart\n    start = start + 1\n    end = end - 1\n  }\n\n  mutableArray\n}\n\nval list = ArrayBuffer(1, 2, 3, 4, 5)\nreverse(list)\n\n</code></pre>\n<p>The above imperative solution reverses the list in place, before returning the reversed list. In a functional solution, a datastructure can be deconstructed, and built back in the desired state by using function calls as an implicit stack behind the scenes which we may use as a tool to deconstruct our data.</p>\n<pre><code class=\"scala\"><br/>def reverse(para: List[Int]): List[Int] = {\n\n  def _reverse(current: Int, tail: List[Int], acc: List[Int]): List[Int] = {\n\n    tail match {\n      case Nil                =&gt; current :: acc\n      case next :: remaining  =&gt; _reverse(next, remaining, current :: acc)\n    }\n  }\n\n  _reverse(para.head, para.tail, List())\n}\n\nval list = List(1, 2, 3, 4, 5)\nreverse(list)\n\n</code></pre>\n<p>The above acheives the same result of reversing the input datastructure, but it handles an immutable list. Updates to state are actually acheived by recursively disconstructing the datastructure, and forming a new datastructure a piece at a time. While this may seem wasteful, it is important to consider that a recursively defined datastructure need only be deconstructed up to the element at which we need to &lsquo;mutate&rsquo; the element: </p>\n<pre><code class=\"scala \"><br/>def capitalize(str: List[Char]) = {\n  str.head.toUpper :: str.tail\n}\n\nval name = List[Char](&#39;l&#39;, &#39;i&#39;, &#39;a&#39;, &#39;m&#39;)\ncapitalize(name) // List[Char](&#39;L&#39;, &#39;i&#39;, &#39;a&#39;, &#39;m&#39;)\n\n</code></pre>\n<p>It is for this reason, that we typically see immutable data structures implemented as Tree&rsquo;s and List&rsquo;s, as they are particularly ameaniable to definition by recursion. In the case of Tree&rsquo;s, entire subtrees of the old structure may be reused in the newly created immutable structure.</p>\n<h3>The Problems with Mutability</h3>\n<p>This may seem like a lot of trouble to go to in order to maintain immutability, and it may seem unnessecary if one is familiar with imperative based mutable solutions. It is the case that when time or space constraints are imposed on a software system, that the mutable micro managing of state and space are preferable, however, in the era of cheap memory and computational power (relatively speaking), many applications benefit to a greater extent from shortened development time and ease of code understanding.</p>\n<p>This is one area where Immutable structures have somewhat of an advantage over their mutable counterparts. An immutable structure or value can be easier to &lsquo;reason about&rsquo;, as once you know the value of a named parameter, you can be sure that it will always be that value wherever you see that name within the values scope. </p>\n<p>This is in direct conflict with mutable variables, which at any moment in time may be holding a different value to what it held just recently. These problems are only more emphasised in a multithreaded envionment, where multiple threads of execution may be contending for the same resource to perform updates.</p>\n<p>Conversely, immutable structures have a certain advantage when it comes to a multithreaded environment. When all values and structures which are defined are read only, they therefore do not require locking.</p>\n<h3>Pure Functions</h3>\n<p>With a lack of mutable state, it is also much easier to avoid functions which carry out side effects on the system they reside in. Side Effects can be understood as any mutation to external state which occurs as the result of the invokation of a function. A Pure Function therefore, is a function which only operates on the data which is passed in to it. Only a very simple example needs to be present to understand the drawbacks of using a funtion which undertakes side effects as part of its operation:</p>\n<pre><code class=\"scala\"><br/>case object ImpureFunction {\n\n  var externalState = 0\n  def sideEffectTheExternalState(x: Int): Int = {\n    externalState = x + externalState\n    externalState\n  }\n}\n\nImpureFunction.sideEffectTheExternalState(4)    // 4\nImpureFunction.sideEffectTheExternalState(4)    // 8\nImpureFunction.sideEffectTheExternalState(4)    // 12\nImpureFunction.sideEffectTheExternalState(4)    // 16\n\n</code></pre>\n<p>In the object example, the invokation of the function &lsquo;sideEffectTheExternalState&rsquo;, causes the side effect of updating the state &lsquo;externalState&rsquo;. Immediately we see the consequence of this design descision. It has become exponentially harder to reason about, as the relationship between the functions inputs and its output, is not only a function of the inputs, but also of the temporal order of the function calls.</p>\n<p>As we read and understand the code, in order to infer the return value of the simple invokation of sideEffectTheExternalState(4), we must also understand and trace all previous invokations. This can be a task of trivial difficultly, or an error prone and protracted program tracing exercise, depending on the size of the codebase and complexity of the side effect.</p>\n<p>Conversely, a function such as the following: </p>\n<pre><code class=\"scala\">case object PureFunction {\n\n  def sideEffectTheExternalState(x: Int, y: Int, z: Int): Int = {\n    (x * x * y * z)/y\n  }\n}\n\nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16\nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16\nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16    \nPureFunction.sideEffectTheExternalState(4, 6, 1)    //16\n</code></pre>\n<p>&hellip; is much easier to reason about. Although the operation the function carries out is slightly more complicated. Once we have understood the evaluation of the function, we can be assured that for the same inputs, we will receive the same results.</p>\n<p>This provides a lift on the mental burden which the programmer will face when reading code which is using a purely functional approach. Using pure functions and immutability also helps to build toward the ideal of the code base becomming referentially transparent in sections.</p>\n<h3>Referential Transparency</h3>\n<p>A Referentially Transparent system, is in effect, a system made up of pure functions, in which those pure functions may be replaced by their value, and this replacement will not affect the semantics of the system.</p>\n<p>As an example of this, consider the following: </p>\n<pre><code class=\"scala\">def someFunc(x: Int, y: Int): Int = {\n  val sum = x + y\n  sum / 2\n}\n</code></pre>\n<p>The above function when invoked with (2, 4), can have its values substituted as follows: </p>\n<pre><code>someFunc(2, 4)\n    6 = 2 + 4\n    return 6 / 2\n</code></pre>\n<p>This is the correct behaviour for this function. </p>\n<p>Now consider what happens when we throw assignment into the mix.</p>\n<pre><code class=\"scala\">def someFunc(x: Int, y: Int): Int = {\n  var sum = x\n  sum = sum + y\n  sum / 2\n}\n\nsomeFunc(2, 4)\n</code></pre>\n<p>And now try to evaluate our function via substitution of values: </p>\n<pre><code>someFunc(2, 4)\n    2(sum) = 2\n    2(sum) = 2(sum) + 4 //incorrect!\n    return 3\n</code></pre>\n<p>By introducing the assignment, we can no longer evaluate our function via substition, due to the temporal coupling between the variable sum, and its place in the code, the value contained with the sum variable has become non deterministic. </p>\n<h3>Multithreading</h3>\n<p>Ultimately, this treatment of immutability by default, is one of the key tools in making Functional Programming more suited to multithreaded or distributed computing.</p>\n<p>Firstly, this is because (as mentioned previously), immutable structures do not require locking, allowing for optimal concurrent and parallel access patterns. Additionally, referential transparency effectivly means a liberation from many of the temporal couplings side effecting code contains. While this does not completely eliminate all problems, it does make working within the parallel context easier. One such problem which remains, is that of working with stale data. Immutable data structures do not guarantee for instance, that the data you are reading is the most up to date, as there may be new alterations in a new branch of the structure.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1488504160205_-1348330003","id":"20170130-221237_1038500617","dateCreated":"2017-03-03T01:22:40+0000","dateStarted":"2017-03-03T08:15:45+0000","dateFinished":"2017-03-03T08:15:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7537"},{"text":"","dateUpdated":"2017-03-03T01:22:40+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488504160224_-1356794479","id":"20170201-175546_248826486","dateCreated":"2017-03-03T01:22:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7538"}],"name":"Immutability","id":"2CD8U9F9Q","angularObjects":{"2CAVXEDGR:shared_process":[],"2CC93329H:shared_process":[],"2CCKTWRVG:shared_process":[],"2CD8WKTCR:shared_process":[],"2C9M3RD9V:shared_process":[],"2CAJVHYCR:shared_process":[],"2CBPU2EHU:shared_process":[],"2CB3ANSKC:shared_process":[],"2CAM6PBJ6:shared_process":[],"2CCEDH17P:shared_process":[],"2CAB4CEVS:shared_process":[],"2CC2W5B1D:shared_process":[],"2CBZQGDUA:shared_process":[],"2CAXVKKBX:shared_process":[],"2C9TKKRAH:shared_process":[],"2CAV4W5B6:shared_process":[],"2C9A3SC2K:shared_process":[],"2C9Q9FW4X:shared_process":[],"2C9H6ESHD:shared_process":[],"2CAK3VSPJ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}