{"paragraphs":[{"text":"%md\n\n# Lazy Evaluation\n\nLazy Evaluation is a conceptually simple topic to grasp.  It effectivly means that the execution of a statement is delayed until the value that it computes is required.  There is a small overhead in carrying around the evaluation of a statement, rather than its value.  However, this is a small tradeoff for the potential benefits it provides.\n\n### Capacity for Implicit Memoization, and Infinite Datastructure Representation.\n\nA good example for the ability of implicit memoization, is that of Streams.\nStreams are known as a lazy form of Lists, and represent a potentially infinite sequence of elements, which are lazily evaluated, and implicitly memoized for later recall.\n\n```scala\n// An example of an infinite stream starting at 0\nval s = Stream.from(0)\ns.take(4) foreach println //0, 1, 2, 3\n\n```\nOf special note, is that the initial signiture of our Stream is ```Stream(0, ?)```.\nHowever, if we take a number of elements, and attempt to retake them, it will only perform the generation of those objects once.\n\n### Not Executing Expensive Operations Unless They are Needed, Thereby Winning Performance Gains.\n\nSometimes when delaying execution of a computation, we may eventually realise that we do not need the computation at all.  One such example may be the setting up of a connection to an external resource, or performing a particularly complicated calculation.  Some languages such as Haskell are by default lazy, however, in Scala, some additional markers are required to represent lazy values.\n\n```scala\nobject lazyEvaluation extends App {\n\n  lazy val expensive = Thread sleep 10000000\n\n  def avoidBlock(expensiveOp: => Unit, use: Boolean) = {\n    if(use)\n      expensiveOp\n    else\n      Unit\n  }\n\n  val use = false\n  avoidBlock(expensive, use)\n  Console println \"Immediately Reached\"\n\n}\n\n```\n\nThere are two things to note above: \n\nFirstly, the modifier to the val declaration signifies that the program should treat the computation of that value lazily.  This means that `Thread sleep 10000000` is not evaluation the first time we hit this declaration.  We then use the expensive value, by passing it to the function avoidBlock.  However, if we examine the type of the parameter (expensiveOp: => Unit), this implies that we have a pass-by-name parameter, which is akin to a lazy way of passing a parameter.  Otherwise, our sleep function would have been triggered, as its value would have been passed to the function instead of its declaration.\n\nIn the function above, the sleep function is never evaluated, and our program almost immediately reaches the \"Immediately Reached\" output.\n\n","user":"anonymous","dateUpdated":"2017-03-03T08:16:39+0000","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":[{"graph":{"mode":"table","height":1140.390625,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":true,"colWidth":9},"settings":{"params":{"payBy":""},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Lazy Evaluation</h1>\n<p>Lazy Evaluation is a conceptually simple topic to grasp. It effectivly means that the execution of a statement is delayed until the value that it computes is required. There is a small overhead in carrying around the evaluation of a statement, rather than its value. However, this is a small tradeoff for the potential benefits it provides.</p>\n<h3>Capacity for Implicit Memoization, and Infinite Datastructure Representation.</h3>\n<p>A good example for the ability of implicit memoization, is that of Streams.<br/>Streams are known as a lazy form of Lists, and represent a potentially infinite sequence of elements, which are lazily evaluated, and implicitly memoized for later recall.</p>\n<pre><code class=\"scala\">// An example of an infinite stream starting at 0\nval s = Stream.from(0)\ns.take(4) foreach println //0, 1, 2, 3\n\n</code></pre>\n<p>Of special note, is that the initial signiture of our Stream is <code>Stream(0, ?)</code>.<br/>However, if we take a number of elements, and attempt to retake them, it will only perform the generation of those objects once.</p>\n<h3>Not Executing Expensive Operations Unless They are Needed, Thereby Winning Performance Gains.</h3>\n<p>Sometimes when delaying execution of a computation, we may eventually realise that we do not need the computation at all. One such example may be the setting up of a connection to an external resource, or performing a particularly complicated calculation. Some languages such as Haskell are by default lazy, however, in Scala, some additional markers are required to represent lazy values.</p>\n<pre><code class=\"scala\">object lazyEvaluation extends App {\n\n  lazy val expensive = Thread sleep 10000000\n\n  def avoidBlock(expensiveOp: =&gt; Unit, use: Boolean) = {\n    if(use)\n      expensiveOp\n    else\n      Unit\n  }\n\n  val use = false\n  avoidBlock(expensive, use)\n  Console println &quot;Immediately Reached&quot;\n\n}\n\n</code></pre>\n<p>There are two things to note above: </p>\n<p>Firstly, the modifier to the val declaration signifies that the program should treat the computation of that value lazily. This means that <code>Thread sleep 10000000</code> is not evaluation the first time we hit this declaration. We then use the expensive value, by passing it to the function avoidBlock. However, if we examine the type of the parameter (expensiveOp: =&gt; Unit), this implies that we have a pass-by-name parameter, which is akin to a lazy way of passing a parameter. Otherwise, our sleep function would have been triggered, as its value would have been passed to the function instead of its declaration.</p>\n<p>In the function above, the sleep function is never evaluated, and our program almost immediately reaches the &ldquo;Immediately Reached&rdquo; output.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1488507543293_1919581014","id":"20170130-221237_1038500617","dateCreated":"2017-03-03T02:19:03+0000","dateStarted":"2017-03-03T08:16:39+0000","dateFinished":"2017-03-03T08:16:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7944"},{"text":"","dateUpdated":"2017-03-03T02:19:03+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","results":{},"editorSetting":{"language":"scala"},"colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1488507543304_2001532530","id":"20170201-175546_248826486","dateCreated":"2017-03-03T02:19:03+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7945"}],"name":"Lazy Evaluation","id":"2CCZFMCMV","angularObjects":{"2CAVXEDGR:shared_process":[],"2CC93329H:shared_process":[],"2CCKTWRVG:shared_process":[],"2CD8WKTCR:shared_process":[],"2C9M3RD9V:shared_process":[],"2CAJVHYCR:shared_process":[],"2CBPU2EHU:shared_process":[],"2CB3ANSKC:shared_process":[],"2CAM6PBJ6:shared_process":[],"2CCEDH17P:shared_process":[],"2CAB4CEVS:shared_process":[],"2CC2W5B1D:shared_process":[],"2CBZQGDUA:shared_process":[],"2CAXVKKBX:shared_process":[],"2C9TKKRAH:shared_process":[],"2CAV4W5B6:shared_process":[],"2C9A3SC2K:shared_process":[],"2C9Q9FW4X:shared_process":[],"2C9H6ESHD:shared_process":[],"2CAK3VSPJ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}