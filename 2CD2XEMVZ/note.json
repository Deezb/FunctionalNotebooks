{
  "paragraphs": [
    {
      "text": "%md\n\n# Lazy Evaluation\n\nLazy Evaluation is a conceptually simple topic to grasp.  It effectivly means that the execution of a statement is delayed until the value that it computes is required.  There is a small overhead in carrying around the evaluation of a statement, rather than its value.  However, this is a small tradeoff for the potential benefits it provides.\n\n### Capacity for Implicit Memoization, and Infinite Datastructure Representation.\n\nA good example for the ability of implicit memoization, is that of Streams.\nStreams are known as a lazy form of Lists, and represent a potentially infinite sequence of elements, which are lazily evaluated, and implicitly memoized for later recall.\n\n```scala\n// An example of an infinite stream starting at 0\nval s \u003d Stream.from(0)\ns.take(4) foreach println //0, 1, 2, 3\n\n```\nOf special note, is that the initial signiture of our Stream is ```Stream(0, ?)```.\nHowever, if we take a number of elements, and attempt to retake them, it will only perform the generation of those objects once.\n\n### Not Executing Expensive Operations Unless They are Needed, Thereby Winning Performance Gains.\n\nSometimes when delaying execution of a computation, we may eventually realise that we do not need the computation at all.  One such example may be the setting up of a connection to an external resource, or performing a particularly complicated calculation.  Some languages such as Haskell are by default lazy, however, in Scala, some additional markers are required to represent lazy values.\n\n```scala\nobject lazyEvaluation extends App {\n\n  lazy val expensive \u003d Thread sleep 10000000\n\n  def avoidBlock(expensiveOp: \u003d\u003e Unit, use: Boolean) \u003d {\n    if(use)\n      expensiveOp\n    else\n      Unit\n  }\n\n  val use \u003d false\n  avoidBlock(expensive, use)\n  Console println \"Immediately Reached\"\n\n}\n\n```\n\nThere are two things to note above: \n\nFirstly, the modifier to the val declaration signifies that the program should treat the computation of that value lazily.  This means that `Thread sleep 10000000` is not evaluation the first time we hit this declaration.  We then use the expensive value, by passing it to the function avoidBlock.  However, if we examine the type of the parameter (expensiveOp: \u003d\u003e Unit), this implies that we have a pass-by-name parameter, which is akin to a lazy way of passing a parameter.  Otherwise, our sleep function would have been triggered, as its value would have been passed to the function instead of its declaration.\n\nIn the function above, the sleep function is never evaluated, and our program almost immediately reaches the \"Immediately Reached\" output.\n\n",
      "user": "anonymous",
      "dateUpdated": "Mar 3, 2017 10:44:31 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 9.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 1140.390625,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {
          "payBy": ""
        },
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488537747106_-1621360286",
      "id": "20170130-221237_1038500617",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eLazy Evaluation\u003c/h1\u003e\n\u003cp\u003eLazy Evaluation is a conceptually simple topic to grasp. It effectivly means that the execution of a statement is delayed until the value that it computes is required. There is a small overhead in carrying around the evaluation of a statement, rather than its value. However, this is a small tradeoff for the potential benefits it provides.\u003c/p\u003e\n\u003ch3\u003eCapacity for Implicit Memoization, and Infinite Datastructure Representation.\u003c/h3\u003e\n\u003cp\u003eA good example for the ability of implicit memoization, is that of Streams.\u003cbr/\u003eStreams are known as a lazy form of Lists, and represent a potentially infinite sequence of elements, which are lazily evaluated, and implicitly memoized for later recall.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"scala\"\u003e// An example of an infinite stream starting at 0\nval s \u003d Stream.from(0)\ns.take(4) foreach println //0, 1, 2, 3\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOf special note, is that the initial signiture of our Stream is \u003ccode\u003eStream(0, ?)\u003c/code\u003e.\u003cbr/\u003eHowever, if we take a number of elements, and attempt to retake them, it will only perform the generation of those objects once.\u003c/p\u003e\n\u003ch3\u003eNot Executing Expensive Operations Unless They are Needed, Thereby Winning Performance Gains.\u003c/h3\u003e\n\u003cp\u003eSometimes when delaying execution of a computation, we may eventually realise that we do not need the computation at all. One such example may be the setting up of a connection to an external resource, or performing a particularly complicated calculation. Some languages such as Haskell are by default lazy, however, in Scala, some additional markers are required to represent lazy values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"scala\"\u003eobject lazyEvaluation extends App {\n\n  lazy val expensive \u003d Thread sleep 10000000\n\n  def avoidBlock(expensiveOp: \u003d\u0026gt; Unit, use: Boolean) \u003d {\n    if(use)\n      expensiveOp\n    else\n      Unit\n  }\n\n  val use \u003d false\n  avoidBlock(expensive, use)\n  Console println \u0026quot;Immediately Reached\u0026quot;\n\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are two things to note above: \u003c/p\u003e\n\u003cp\u003eFirstly, the modifier to the val declaration signifies that the program should treat the computation of that value lazily. This means that \u003ccode\u003eThread sleep 10000000\u003c/code\u003e is not evaluation the first time we hit this declaration. We then use the expensive value, by passing it to the function avoidBlock. However, if we examine the type of the parameter (expensiveOp: \u003d\u0026gt; Unit), this implies that we have a pass-by-name parameter, which is akin to a lazy way of passing a parameter. Otherwise, our sleep function would have been triggered, as its value would have been passed to the function instead of its declaration.\u003c/p\u003e\n\u003cp\u003eIn the function above, the sleep function is never evaluated, and our program almost immediately reaches the \u0026ldquo;Immediately Reached\u0026rdquo; output.\u003c/p\u003e\n\u003c/div\u003e"
      },
      "dateCreated": "Mar 3, 2017 10:42:27 AM",
      "dateStarted": "Mar 3, 2017 10:44:31 AM",
      "dateFinished": "Mar 3, 2017 10:44:31 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "Mar 3, 2017 10:44:31 AM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "results": {},
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488537747107_-1621745035",
      "id": "20170201-175546_248826486",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 3, 2017 10:42:27 AM",
      "dateStarted": "Mar 3, 2017 10:44:31 AM",
      "dateFinished": "Mar 3, 2017 10:44:31 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Liam/LazyEvaluation",
  "id": "2CD2XEMVZ",
  "angularObjects": {
    "2C7EWGKXN:shared_process": [],
    "2CAGPJ93Y:shared_process": [],
    "2C8HKHF53:shared_process": [],
    "2C9X1SS4K:shared_process": [],
    "2C7C4ENCY:shared_process": [],
    "2C7KTHZNU:shared_process": [],
    "2C7RVPZ3W:shared_process": [],
    "2C9BA4F3E:shared_process": [],
    "2CAGV9SKG:shared_process": []
  },
  "config": {},
  "info": {}
}